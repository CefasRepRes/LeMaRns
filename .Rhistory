return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
mean(tail(colSums(nash@Catch[,i,]),10))/1e6
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e12)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
### set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
?run_LeMans
model_run_n_init <- run_LeMans(NS_params_n,years=50,intercept=1e20)
### set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
model_run_n_init <- run_LeMans(NS_params_n,years=50,intercept=1e11)
### set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e11)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
### set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/a_b.Rdata")
new_ab
NS_par
NS_par$a <- new_ab$a
NS_par$b <- new_ab$b
NS_par
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e11)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
plot_SSB(inputs=NS_params_n,outputs=model_run_n_init)
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
eff
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=total_catch)
data.frame(species=NS_params_n@species_names,Nash_catch=round(total_catch,2))
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e12)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
### set the initial state
N0 <- model_run_n_init@N[,,501]
plot_SSB(inputs=NS_params_n,outputs=model_run_n_init)
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
eff
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
total_catch <- colMeans(apply(nash@Catch[,,192:201],2,colSums))/1e6
data.frame(species=NS_params_n@species_names,Nash_catch=round(total_catch,2))
fmsy <-c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
plot(eff, fmsy)
abline(a=0,b=1)
eff
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=5e11)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
### set the initial state
N0 <- model_run_n_init@N[,,501]
plot_SSB(inputs=NS_params_n,outputs = nash)
plot_SSB(inputs=NS_params_n,outputs=model_run_n_init)
tools::package_native_routine_registration_skeleton()
?package_native_routine_registration_skeleton
?package_native_routine_registration_skeleton(dir="Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns")
tools::package_native_routine_registration_skeleton(dir="Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns")
tools::package_native_routine_registration_skeleton(dir="Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/")
tools::package_native_routine_registration_skeleton(dir="Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/R")
devtools::check()
install.packages("qpdf")
devtools::check()
devtools::check()
library(LeMaRns)
spelling::spell_check_package("Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/LeMaRns.pdf")
install.packages("spelling")
install.packages("spelling")
library(spelling)
spelling::spell_check_package("Z:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/LeMaRns.pdf")
spelling::spell_check_package("LeMaRns.pdf")
spelling::spell_check_package()
library(LeMaRns)
spelling::spell_check_package()
devtools::release()
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e12)
model_run_n_init <- run_LeMans(NS_params_n, years=50)
# Set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp <- run_LeMans(NS_params_n, N0=N0, years=20, effort=matrix(eff, nrow=20, ncol=21, byrow=T))
return(mean(tail(colSums(tmp@Catch[,i,]), 10)))
}
#### this bit needs not to be run
eff <- fmsy <-c(1.3, 0.35, 0.35, 0.72, 0.6, 0.41, 0.25, 0.5, 0.33, 0.22, 0.32, 0.21, 0.27,
0.27, 0.25, 0.15, 0.30, 0.11, 0.1, 0.19, 0.3)
stat <- rep(FALSE, 21)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i], calc_catch, i=i, eff=eff, method="Brent", lower=0, upper=2,control = list(fnscale = -1))
stat[i] <- abs(eff[i]-opts$par)<0.01
eff[i] <- opts$par
}
}
## need to save opts, stat, eff and fmsy; and secretly load them.
save(opts,stat,eff,fmsy,file="vignettes/nash.rda")
run_the_model<- function(ef){
effort <- matrix(ef, 50, dim(NS_params@Qs)[3], byrow=T)
colnames(effort) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(params=NS_params, N0=model_run@N[,,501],
years=50, effort=effort)
return(model_run)
}
NS_params <- LeMansParam(df=NS_par, gdf = mixed_fish, tau=NS_tau, eta=eta, L50=L50, other=1e12)
effort <- matrix(0, 50, dim(NS_params@Qs)[3])
colnames(effort) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(NS_params, years=50, effort=effort)
ef_lvl <- c(0, 0.5, 1, 1.5, 2)
efs <- expand.grid(Industrial=ef_lvl, Otter=ef_lvl, Beam=ef_lvl, Pelagic=ef_lvl)
sce <- apply(efs, 1, run_the_model)
### save sce
save(sec,file="vignettes/sec.rda")
devtools::load_all(".")
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=eta, L50=L50, other=1e12)
model_run_n_init <- run_LeMans(NS_params_n, years=50)
# Set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp <- run_LeMans(NS_params_n, N0=N0, years=20, effort=matrix(eff, nrow=20, ncol=21, byrow=T))
return(mean(tail(colSums(tmp@Catch[,i,]), 10)))
}
#### this bit needs not to be run
eff <- fmsy <-c(1.3, 0.35, 0.35, 0.72, 0.6, 0.41, 0.25, 0.5, 0.33, 0.22, 0.32, 0.21, 0.27,
0.27, 0.25, 0.15, 0.30, 0.11, 0.1, 0.19, 0.3)
stat <- rep(FALSE, 21)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i], calc_catch, i=i, eff=eff, method="Brent", lower=0, upper=2,control = list(fnscale = -1))
stat[i] <- abs(eff[i]-opts$par)<0.01
eff[i] <- opts$par
}
}
## need to save opts, stat, eff and fmsy; and secretly load them.
save(opts,stat,eff,fmsy,file="vignettes/nash.rda")
run_the_model<- function(ef){
effort <- matrix(ef, 50, dim(NS_params@Qs)[3], byrow=T)
colnames(effort) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(params=NS_params, N0=model_run@N[,,501],
years=50, effort=effort)
return(model_run)
}
NS_params <- LeMansParam(df=NS_par, gdf = mixed_fish, tau=NS_tau, eta=eta, L50=L50, other=1e12)
effort <- matrix(0, 50, dim(NS_params@Qs)[3])
colnames(effort) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(NS_params, years=50, effort=effort)
ef_lvl <- c(0, 0.5, 1, 1.5, 2)
efs <- expand.grid(Industrial=ef_lvl, Otter=ef_lvl, Beam=ef_lvl, Pelagic=ef_lvl)
sce <- apply(efs, 1, run_the_model)
### save sce
save(sec,file="vignettes/sec.rda")
### save sce
save(sce,file="vignettes/sce.rda")
class(sce)
length(sce)
length(sce[[1]])
class(sce[[1]])
LFI <- unlist(lapply(lapply(sce, FUN=get_LFI, time_steps=492:501, inputs=NS_params),
mean))
TyL <- unlist(lapply(lapply(sce, FUN=get_TyL, time_steps=492:501, inputs=NS_params),
mean))
MML <- unlist(lapply(lapply(sce, FUN=get_MML, time_steps=492:501, inputs=NS_params),
mean))
new_SSB <- do.call(rbind, lapply(lapply(sce, FUN=get_SSB, time_steps=492:501,
inputs=NS_params), colMeans))/1e6
# Relative SSB
rel_SSB <- t(t(new_SSB)/v_SSB)
colnames(rel_SSB) <- NS_params@species_names
risk <- apply(rel_SSB, 1, function(x){return(sum(x<0.1))})
LFI <- unlist(lapply(lapply(sce, FUN=get_LFI, time_steps=492:501, inputs=NS_params),
mean))
TyL <- unlist(lapply(lapply(sce, FUN=get_TyL, time_steps=492:501, inputs=NS_params),
mean))
MML <- unlist(lapply(lapply(sce, FUN=get_MML, time_steps=492:501, inputs=NS_params),
mean))
new_SSB <- do.call(rbind, lapply(lapply(sce, FUN=get_SSB, time_steps=492:501,
inputs=NS_params), colMeans))/1e6
# Relative SSB
v_SSB <- colMeans(get_SSB(inputs=NS_params, outputs=model_run, time_steps=492:501))/1e6
rel_SSB <- t(t(new_SSB)/v_SSB)
colnames(rel_SSB) <- NS_params@species_names
risk <- apply(rel_SSB, 1, function(x){return(sum(x<0.1))})
object.size(sce)
object.size(risk)
### save sce
save(LFI,TyL,MML,risk,rel_SSB,file="vignettes/sce.rda")
rel_SSB
eff
fmsy_lm <- sapply(1:21, function(i, eff){optim(eff[i], calc_catch, i=i, eff=eff,
method="Brent", lower=0, upper=2,control = list(fnscale = -1))$par},
eff=fmsy)
#msy <- run_LeMans(NS_params_n, N0=N0, years=20, effort=matrix(fmsy_lm, nrow=20, ncol=21, byrow=T))
## need to save opts, stat, eff and fmsy; and secretly load them.
save(eff,fmsy,fmsy_lm,file="vignettes/nash.rda")
library(devtools)
check()
check()
?submit_cran
library(mizer)
?mizer
?LeMaRns
library(LeMaRns)
?calc_M1_constRNM
?rnorm
libray(LeMaRns)
library(LeMaRns)
?calc_M1
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/gear.rda")
ls()
eta -> NS_eta
NS_L50 <- L50
NS_mixed_fish <- mixed_fish
setwd("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data")
save(NS_eta,NS_L50,NS_mixed_fish,file="gear.rda")
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/gear.rda")
setwd("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns")
NS_params <- LeMansParam(df=NS_par, gdf = mixed_fish, tau=NS_tau, eta=eta, L50=L50, other=1e12)
library(LeMaRns)
NS_params <- LeMansParam(df=NS_par, gdf = mixed_fish, tau=NS_tau, eta=eta, L50=L50, other=1e12)
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/NS_par.rda")
ls()
NS_other <- 1e12
save(NS_other,file="Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/NS_par.rda")
library(LeMaRns)
NS_par
NS_par<- NS_par
save(NS_par,NS_other,file="Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/NS_par.rda")
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/NS_par.rda")
load("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS/LeMaRns/data/NS_par.rda")
library(LeMaRns)
NS_other
NS_par
ls()
?devtools::release?
?devtools::release
?devtools::release
?devtools::submit_cran
library(LeMaRns)
calc_phi
library(LeMaRns)
calc_phi
uninstall(LeMaRns)
uninstall.packages("LeMaRns")
unlink('vignettes/lemarns_cache', recursive = TRUE)
library(LeMaRns)
version(LeMans)
?LeMansParam
library(LeMaRns)
setwd("Y:/C7413_H2020 PANDORA/Working_Area/R_LeMANS")
library(LeMaRns)
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=NS_eta, L50=NS_L50, other=NS_other)
#run_LeMans(NS_params)
effort_mat <- matrix(0.25, 50, dim(NS_params@Qs)[3])
model_run <- run_LeMans(NS_params, years=50, effort=effort_mat)
setEPS()
postscript("Fig1.eps")
plot_SSB(NS_params,model_run)
dev.off()
#### Nash example
NS_params_n <- LeMansParam(NS_par, tau=NS_tau, eta=NS_eta, L50=NS_L50, other=NS_other)
model_run_n_init <- run_LeMans(NS_params_n,years=50)
### set the initial state
N0 <- model_run_n_init@N[,,501]
calc_catch<-function(x,i,eff){
eff[i] <- x
tmp<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
return(-mean(tail(colSums(tmp@Catch[,i,]),10))) ## minus because we want to use the optim function
}
stat <- rep(FALSE,21)
eff <- fmsy <-c(1.3,0.35,0.35,0.72,0.6,0.41,0.25,0.5,0.33,0.22,0.32,0.21,0.27,0.27,0.25,0.15,0.30,0.11,0.1,0.19,0.3)
while(any(stat==FALSE)){
for (i in 1:21){
opts <- optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)
stat[i] <- abs(eff[i] - opts$par) < 0.01
eff[i] <- opts$par
}
}
nash<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(eff,nrow=20,ncol=21,byrow=T))
plot_SSB(inputs=NS_params_n,outputs = nash)
fmsy_lm<-sapply(1:21,function(i,eff){optim(eff[i],calc_catch,i=i,eff=eff,method = "Brent",lower=0,upper=2)$par},eff=fmsy)
msy<-run_LeMans(NS_params_n,N0=N0,years=20,effort=matrix(fmsy_lm,nrow=20,ncol=21,byrow=T))
setEPS()
postscript("Fig2.eps")
plot(fmsy_lm,eff,ylab=expression(F[Nash]~~(yr^-1)),xlab=expression(F[MSY]~~(yr^-1)))
abline(a=0,b=1)
dev.off()
######################################
######################################
## mixed fishery
## setup the model
NS_params <- LeMansParam(df=NS_par, gdf = NS_mixed_fish, tau=NS_tau, eta=NS_eta, L50=NS_L50, other=NS_other)
### run the initial 50 years
effort <- matrix(0, 50, dim(NS_params@Qs)[3])
colnames(effort) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(NS_params, years=50, effort=effort)
### get factoral design
ef_lvl <- c(0, 0.5, 1, 1.5, 2)
efs <- expand.grid(Industrial=ef_lvl, Otter=ef_lvl, Beam=ef_lvl, Pelagic=ef_lvl)
### define model run
run_the_model<- function(ef){
effort_mat <- matrix(ef, 50, dim(NS_params@Qs)[3], byrow=T)
colnames(effort_mat) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(params=NS_params, N0=model_run@N[,,501],
years=50, effort=effort_mat)
return(model_run)
}
## run the model
sce <- apply(efs, 1, run_the_model)
## calculate the indicators for the final year
LFI <- unlist(lapply(lapply(sce, FUN=get_LFI, time_steps=492:501, inputs=NS_params),
mean))
TyL <- unlist(lapply(lapply(sce, FUN=get_TyL, time_steps=492:501, inputs=NS_params),
mean))
MML <- unlist(lapply(lapply(sce, FUN=get_MML, time_steps=492:501, inputs=NS_params),
mean))
### plot them all
par(mfrow=c(2, 2))
boxplot(LFI~efs[, 1], main="Industrial", xlab="Effort", ylab="LFI")
boxplot(LFI~efs[, 2], main="Otter", xlab="Effort", ylab="LFI")
boxplot(LFI~efs[, 3], main="Beam", xlab="Effort", ylab="LFI")
boxplot(LFI~efs[, 4], main="Pelagic", xlab="Effort", ylab="LFI")
par(mfrow=c(2, 2))
boxplot(TyL~efs[, 1], main="Industrial", xlab="effort", ylab="TyL")
boxplot(TyL~efs[, 2], main="Otter", xlab="effort", ylab="TyL")
boxplot(TyL~efs[, 3], main="Beam", xlab="effort", ylab="TyL")
boxplot(TyL~efs[, 4], main="Pelagic", xlab="effort", ylab="TyL")
par(mfrow=c(2, 2))
boxplot(MML~efs[, 1], main="Industrial", xlab="effort", ylab="MML")
boxplot(MML~efs[, 2], main="Otter", xlab="effort", ylab="MML")
boxplot(MML~efs[, 3], main="Beam", xlab="effort", ylab="MML")
boxplot(MML~efs[, 4], main="Pelagic", xlab="effort", ylab="MML")
### Calculate the virgin biomass
v_SSB <- colMeans(get_SSB(inputs=NS_params, outputs=model_run, time_steps=492:501))/1e6
# SSB of the final years (tonnes)
new_SSB <- do.call(rbind, lapply(lapply(sce, FUN=get_SSB, time_steps=492:501,
inputs=NS_params), colMeans))/1e6
# Relative SSB
rel_SSB <- t(t(new_SSB)/v_SSB)
colnames(rel_SSB) <- NS_params@species_names
## Plot the results
risk <- apply(rel_SSB, 1, function(x){return(sum(x<0.1))})
setEPS()
postscript("Fig3.eps")
par(mfrow=c(2, 2))
boxplot(risk~efs[, 1], main="Industrial", xlab="Effort", ylab="Stocks at risk")
boxplot(risk~efs[, 2], main="Otter", xlab="Effort", ylab="Stocks at risk")
boxplot(risk~efs[, 3], main="Beam", xlab="Effort", ylab="Stocks at risk")
boxplot(risk~efs[, 4], main="Pelagic", xlab="Effort", ylab="Stocks at risk")
dev.off()
######################################
######################################
## dynamic fishing
## setup recreational fishing
rec_fish <- data.frame(catch_species=c("Cod", "Haddock", "Herring", "Horse mackerel",
"Mackerel", "Plaice", "Saithe", "Whiting"),
curve=rep("knife-edge"), gear_name="Recreational")
rec_fish$max_catchability <- c(0.01, 0.01, 0.005, 0.05, 0.05, 0.01, 0.01, 0.02)
Lmin <- c(35, 30, 20, 15, 30, 27, 35, 27)
## combine fishing gears
gdf <- rbind(NS_mixed_fish, rec_fish)
eta1 <- c(NS_eta, rep(0, 8))
L501 <- c(NS_L50, rep(0, 8))
Lmin1 <- c(rep(0, 21), Lmin)
## setup model
NS_params_rec <- LeMansParam(df=NS_par, gdf = gdf, tau=NS_tau, eta=eta1, L50=L501,
other=NS_other, Lmin=Lmin1)
## run model for 50 years
model_run <- run_LeMans(NS_params_rec, years=50)
##get the effort
Industrial <- rep(1.5, 20)
Otter <- -1/100*1:20*(1:20-20)
Beam <- 1:20*1/20+0.25
Pelagic <- 1+c(1:5*1/5, 5:1*1/5, 1:5*1/5, 5:1*1/5)
Recreational <- 0.1+1:20*0.05/20
##plot the effort
setEPS()
postscript("Fig4.eps")
par(mfrow=c(2, 2))
plot(seq(1,201,10), c(Industrial,tail(Industrial,n=1)), ylab="Effort", main="Industrial", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Otter,tail(Otter,n=1)), ylab="Effort", main="Otter", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Beam,tail(Beam,n=1)), ylab="Effort", main="Beam", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Pelagic,tail(Pelagic,n=1)), ylab="Effort", main="Pelagic", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
dev.off()
#plot(1:20, Recreational, ylab="Effort", main="Recreational", xlab="Year",
#     ylim=c(0, 2), type="s")
par(mfrow=c(1,1))
effort_mat <- cbind(Industrial, Otter, Beam, Pelagic,Recreational)
colnames(effort_mat) <- c("Industrial", "Otter", "Beam", "Pelagic","Recreational")
model_run_rec <- run_LeMans(params=NS_params_rec, N0=model_run@N[,,501],
years=20, effort=effort_mat)
setEPS()
postscript("Fig5.eps")
plot_indicators(inputs=NS_params_rec,outputs=model_run_rec,prob=c(0.10,0.5,0.9))
dev.off()
