## combine fishing gears
gdf <- rbind(NS_mixed_fish, rec_fish)
eta1 <- c(NS_eta, rep(0, 8))
L501 <- c(NS_L50, rep(0, 8))
Lmin1 <- c(rep(0, 21), Lmin)
## setup model
NS_params_rec <- LeMansParam(df=NS_par, gdf = gdf, tau=NS_tau, eta=eta1, L50=L501,
other=NS_other, Lmin=Lmin1)
## run model for 50 years
model_run <- run_LeMans(NS_params_rec, years=50)
##get the effort
Industrial <- rep(1.5, 20)
Otter <- -1/100*1:20*(1:20-20)
Beam <- 1:20*1/20+0.25
Pelagic <- 1+c(1:5*1/5, 5:1*1/5, 1:5*1/5, 5:1*1/5)
Recreational <- 0.1+1:20*0.05/20
##plot the effort
setEPS()
postscript("Fig4.eps")
par(mfrow=c(2, 2))
plot(seq(1,201,10), c(Industrial,tail(Industrial,n=1)), ylab="Effort", main="Industrial", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Otter,tail(Otter,n=1)), ylab="Effort", main="Otter", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Beam,tail(Beam,n=1)), ylab="Effort", main="Beam", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
plot(seq(1,201,10), c(Pelagic,tail(Pelagic,n=1)), ylab="Effort", main="Pelagic", xlab="Time step",
ylim=c(0, 2), type="s",xlim=c(0,200))
dev.off()
#plot(1:20, Recreational, ylab="Effort", main="Recreational", xlab="Year",
#     ylim=c(0, 2), type="s")
par(mfrow=c(1,1))
effort_mat <- cbind(Industrial, Otter, Beam, Pelagic,Recreational)
colnames(effort_mat) <- c("Industrial", "Otter", "Beam", "Pelagic","Recreational")
model_run_rec <- run_LeMans(params=NS_params_rec, N0=model_run@N[,,501],
years=20, effort=effort_mat)
setEPS()
postscript("Fig5.eps")
plot_indicators(inputs=NS_params_rec,outputs=model_run_rec,prob=c(0.10,0.5,0.9))
dev.off()
install.packages("abind")
install.packages("RcppArmadillo")
library(LeMaRns)
library(LeMaRns)
tst <- "aa"
class(tst)
class(as.character(tst))
warning(paste("phi_min, ",phi_min,", is larger than the smallest phi,",min(phi[phi>0]),".",  sep=""))
?calc_phi
nfish <- nrow(NS_par)
nsc <- 32
maxsize <- max(NS_par$Linf)*1.01 # the biggest size is 1% bigger than the largest Linf
l_bound <- seq(0, maxsize, maxsize/nsc); l_bound <- l_bound[-length(l_bound)]
u_bound <- seq(maxsize/nsc, maxsize, maxsize/nsc)
mid <- l_bound+(u_bound-l_bound)/2
# Set up the inputs to the function - species-specific parameters
Linf <- NS_par$Linf # the von-Bertalanffy asymptotic length of each species (cm).
W_a <- NS_par$W_a # length-weight conversion parameter.
W_b <- NS_par$W_b # length-weight conversion parameter.
k <- NS_par$k # the von-Bertalnaffy growth parameter.
Lmat <- NS_par$Lmat # the length at which 50\% of individuals are mature (cm).
# Calculate the proportion of individuals that leave each length class
# with and without a fixed value for phi_min
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=FALSE,
phi_min=0.1) # fixed phi_min
phi <- tmp$phi
phi_min <- tmp$phi_min
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=TRUE) # without fixed phi_min
calc_phi <- function(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=FALSE, phi_min=0.1) {
L_low <- matrix(l_bound, nsc, nfish)
L_up <- matrix(u_bound, nsc, nfish)
ktemp <- t(matrix(k, nfish, nsc))
Ltemp <- t(matrix(Linf, nfish, nsc))
phi <- suppressWarnings((1/ktemp)*log((Ltemp-L_low)/(Ltemp-L_up)))
phi[phi<0|is.na(phi)] <- 0
if (calc_phi_min) {
phi_min <- min(phi[phi>0])
}
if(any(phi[phi>0] < phi_min)){
warning(paste("phi_min, ",phi_min,", is larger than the smallest phi,",min(phi[phi>0]),".",  sep=""))
}
phi[phi>0] <- phi_min/phi[phi>0]
return(list(phi=phi, phi_min=phi_min))
}
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=TRUE) # without fixed phi_min
# Calculate the proportion of individuals that leave each length class
# with and without a fixed value for phi_min
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=FALSE,
phi_min=0.2) # fixed phi_min
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=TRUE) # without fixed phi_min
tmp$phi_min
qchisq(0.999,25 * 8)
qchisq(0.95,25 * 8)
qchisq(0.05,25 * 8)
qchisq(0.95,25 * 8)
qchisq(0.95,25)
qchisq(0.95,25 * 8) /2
install.packages("devtoold")
install.packages("devtools")
source("setting_up_the_model.R")
source("setting_up_the_model.R")
setwd("C:/Project_dir/Irish")
source("setting_up_the_model.R")
source("setting_up_the_model.R")
source("inputtingData.R")
source("outputs_for_rob")
source("outputs_for_rob.R")
source("outputs_for_rob")
load("outputs_for_rob")
load("outputs_for_rob.Rdata")
theta_hat
load("theta_hat.Rdata")
outputs
fish<- c("COD","HAD","HER","PLE","SOL","WHT")
years=seq(1992,2016)
for i in (1:6){
pdf(paste(paste("rot",fish[i],sep="_"),".pdf",sep=""))
plot(years,rot_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,rot_dat[,i],col="black",lwd=1)
par(new=TRUE)
plot(years,outputs$rot[,i],col="red",axes=FALSE,ylab=FALSE)
lines(years,outputs$rot[,i],col="red",lwd=1)
dev.off()
}
for (i in 1:6){
pdf(paste(paste("rot",fish[i],sep="_"),".pdf",sep=""))
plot(years,rot_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,rot_dat[,i],col="black",lwd=1)
par(new=TRUE)
plot(years,outputs$rot[,i],col="red",axes=FALSE,ylab=FALSE)
lines(years,outputs$rot[,i],col="red",lwd=1)
dev.off()
}
outputs$gov
outputs$bt4a
outputs$bt4a[,1]
outputs$gov[,1]
gov_data[,1]
gov_dat[,1]
beam_dat[,1]
bt4a_dat[,1]
# bt4a
years=seq(1993,2015)
for (i in 1:6){
pdf(paste(paste("bt4a",fish[i],sep="_"),".pdf",sep=""))
plot(years,bt4a_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,bt4a_dat[,i],col="black",lwd=1)
par(new=TRUE)
plot(years,outputs$bt4a[,i],col="red",axes=FALSE,ylab=FALSE)
lines(years,outputs$bt4a[,i],col="red",lwd=1)
dev.off()
}
# gov
years=seq(2003,2016)
for (i in 1:6){
pdf(paste(paste("gov",fish[i],sep="_"),".pdf",sep=""))
plot(years,gov_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,gov_dat[,i],col="black",lwd=1)
par(new=TRUE)
plot(years,outputs$gov[,i],col="red",axes=FALSE,ylab=FALSE)
lines(years,outputs$gov[,i],col="red",lwd=1)
dev.off()
}
outputs@tv
outputs@her
head(outputs)
outputs@her_ech
outputs$her_ech
echo_dat
ech_dat
echo_dat <- read.csv("Data/herring_accoustic.csv")
rownames(echo_dat) <- echo_dat[,1]
echo_dat <- as.matrix(echo_dat[,-1])
cvs_tv
filename=c("nephrops_w","nephrops_e")
years=seq(1980,2019)
for (i in 1:2){
pdf(paste(filename,"pdf",sep="."))
plot(years,cvs_tv[,i],col="black",ylab=filename[i],cex=1)
lines(years,cvs_tv[,i],col="black",lwd=1)
par(new=TRUE)
plot(years,outputs$tv[,i],col="red",ylab=FALSE,cex=1,axes=FALSE)
lines(years,outputs$tv[,i],col="red",lwd=1)
dev.off()
}
years
cvs_tv[:,1]
cvs_tv[,1]
outputs$tv[:,1]
outputs$tv[,1]
outputs$tv
outputs
com_catch_dat
com_catch
outputs$com_catch
com_catch_dat
plot(years,rot_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,rot_dat[,i],col="black",lwd=1)
#  par(new=TRUE)
points(years,outputs$rot[,i],col="red")
lines(years,outputs$rot[,i],col="red",lwd=1)
years=seq(1992,2016)
plot(years,rot_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,rot_dat[,i],col="black",lwd=1)
#  par(new=TRUE)
points(years,outputs$rot[,i],col="red")
lines(years,outputs$rot[,i],col="red",lwd=1)
dev.off()
dev.off()
plot(years,rot_dat[,i],col="black",ylab=fish[i],cex=1)
lines(years,rot_dat[,i],col="black",lwd=1)
#  par(new=TRUE)
points(years,outputs$rot[,i],col="red")
lines(years,outputs$rot[,i],col="red",lwd=1)
library(LeMaRns)
?run_LeMans
NS_params <- LeMansParam(NS_par,tau=NS_tau,eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model
model_run <- run_LeMans(NS_params, years=10, effort=effort)
?stop
library(LeMaRns)
?`run_LeMans,LeMans_param-method`
NS_params <- LeMansParam(NS_par,tau=NS_tau,eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other)
NS_params <- LeMansParam(NS_par,tau=as.numeric(NS_tau),eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other)
NS_params <- LeMansParam(NS_par,tau=as.numeric(NS_tau),eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other)
devtools::load_all(".")
library(LeMaRns)
nfish <- nrow(NS_par)
nsc <- 32
maxsize <- max(NS_par$Linf)*1.01 # the biggest size is 1% bigger than the largest Linf
l_bound <- seq(0, maxsize, maxsize/nsc); l_bound <- l_bound[-length(l_bound)]
u_bound <- seq(maxsize/nsc, maxsize, maxsize/nsc)
mid <- l_bound+(u_bound-l_bound)/2
# Set up the inputs to the function - species-specific parameters
Linf <- NS_par$Linf # the von-Bertalanffy asymptotic length of each species (cm).
W_a <- NS_par$W_a # length-weight conversion parameter.
W_b <- NS_par$W_b # length-weight conversion parameter.
k <- NS_par$k # the von-Bertalnaffy growth parameter.
Lmat <- NS_par$Lmat # the length at which 50\% of individuals are mature (cm).
# Get phi_min
tmp <- calc_phi(k, Linf, nsc, nfish, u_bound, l_bound, calc_phi_min=FALSE,
phi_min=0.1) # fixed phi_min
phi_min <- tmp$phi_min
# Calculate growth increments
tmp <- calc_ration_growthfac(k, Linf, nsc, nfish, l_bound, u_bound, mid, W_a, W_b, phi_min)
sc_Linf <- tmp$sc_Linf
wgt <- tmp$wgt
# Calculate predator-prey size preferences
prefs <- calc_prefs(pred_mu=-2.25, pred_sigma=0.5, wgt, sc_Linf)
# Calculate prey preference and prey suitability
suit_M2 <- calc_suit_vect(nsc, nfish, sc_Linf, prefs, NS_tau)
NS_tau
?suit_M2
suit_M2[[1]]
load("C:/Users/MS23/OneDrive - CEFAS/LeMaRns/Package/LeMaRns/vignettes/nash.rda")
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
library(LeMaRns)
?LeMaRns
??LeMaRns
# Alternatively:
NS_params <- LeMansParam(NS_par,tau=NS_tau,eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model
model_run <- run_LeMans(NS_params, years=10, effort=effort)
# Alternatively:
NS_params <- LeMansParam(NS_par,tau=NS_tau,eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other,max_catchability=rep(1,21))
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model
model_run <- run_LeMans(NS_params, years=10, effort=effort)
# Alternatively:
NS_params <- LeMansParam(NS_par,tau=NS_tau,eta=rep(0.25,21),L50=NS_par$Lmat,other=NS_other,max_catchability=as.character(rep(1,21)))
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model
model_run <- run_LeMans(NS_params, years=10, effort=effort)
library(LeMaRns)
NS_L50_new <- NS_L50; NS_eta_new <- NS_eta ## copying the gear parameters
NS_mixed_fish_tmp <- data.frame(catch_species="Monkfish",curve="logistic",gear_name="Beam",max_catchability=0.5) ### adding monkfish to Beam
NS_mixed_fish_new <- rbind(NS_mixed_fish, NS_mixed_fish_tmp)
NS_L50_new <- c(NS_L50,17); NS_eta_new <- c(NS_eta,0.15);
### setup the params
NS_params <- LeMansParam(df=NS_par, gdf = NS_mixed_fish_new, tau=NS_tau, eta=NS_eta_new, L50=NS_L50_new, other=NS_other)
effort_mat <- matrix(0.3, 50, dim(NS_params@Qs)[3])
colnames(effort_mat) <- c("Industrial", "Otter", "Beam", "Pelagic")
model_run <- run_LeMans(NS_params, years=50, effort=effort_mat)
plot_SSB(NS_params,model_run) ## plotting for results
catch_per_gear <-  get_CPG(inputs=NS_params, outputs=model_run,effort=effort_mat)
catch_per_gear[NS_params@species_names=="Monkfish",,500] ## monkfish caught by gears 2 and 3 (Otter and Beam)
devtools::check_win_release()
?comb_LeMans_run
library(LeMaRns)
?comb_LeMans_run
comb_LeMans_run <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (class(LeMans_run_x)!=class(LeMans_run_y)|class(LeMans_run_x)!="LeMans_outputs") {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
library(abind)
comb_LeMans_run <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (class(LeMans_run_x)!=class(LeMans_run_y)|class(LeMans_run_x)!="LeMans_outputs") {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
?inherits
inherit(model_run2,"LeMans_outputs")
inherits(model_run2,"LeMans_outputs")
!inherits(model_run2,"LeMans_outputs")
comb_LeMans_run(c(1:2), model_run2, cont=TRUE)
comb_LeMans_run(c(1:2), c(3:4), cont=TRUE)
comb_LeMans_run <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (class(LeMans_run_x)!=class(LeMans_run_y)|!inherits(LeMans_run_x,"LeMans_outputs")) {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
comb_LeMans_run(c(1:2), c(3:4), cont=TRUE)
class(model_run1)!=class(mode;_run_y)
class(model_run1)!=class(model_run_y)
class(model_run1)!=class(model_run3)
class(model_run1)!=class(model_run2)
inherits(model_run1,class(model_run2))
!inherits(model_run1,class(model_run2))
comb_LeMans_run <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (!inherits(model_run_x,class(model_run_y))|!inherits(LeMans_run_x,"LeMans_outputs")) {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
comb_LeMans_run(c(1:2), c(3:4), cont=TRUE)
comb_LeMans_run <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (!inherits(LeMans_run_x,class(LeMans_run_y))|!inherits(LeMans_run_x,"LeMans_outputs")) {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
comb_LeMans_run(c(1:2), c(3:4), cont=TRUE)
devtools::check_win_release()
1:11[c()]
1:11[c(2)]
(1:11)[c(2)]
(1:11)[c()]
comb_LeMans_run1 <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (!inherits(LeMans_run_x,class(LeMans_run_y))|!inherits(LeMans_run_x,"LeMans_outputs")) {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
N <- abind(LeMans_run_x@N, LeMans_run_y@N[,,-1])
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch[,,-1])
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2[,,-1])
R <- rbind(LeMans_run_x@R, LeMans_run_y@R[-1, ])
} else {
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
}
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
comb_LeMans_run1 <- function(LeMans_run_x, LeMans_run_y, cont=TRUE) {
if (!inherits(LeMans_run_x,class(LeMans_run_y))|!inherits(LeMans_run_x,"LeMans_outputs")) {
stop("LeMans_run_x and LeMans_run_y must be of class LeMans_outputs")
}
if (cont==T) {
LeMans_run_y@N <- LeMans_run_y@N[,,-1]
LeMans_run_y@Catch <- LeMans_run_y@Catch[,,-1]
LeMans_run_y@M2 <-LeMans_run_y@M2[,,-1]
LeMans_run_y@R <- LeMans_run_y@R[-1, ]
}
N <- abind(LeMans_run_x@N, LeMans_run_y@N)
Catch <- abind(LeMans_run_x@Catch, LeMans_run_y@Catch)
M2 <- abind(LeMans_run_x@M2, LeMans_run_y@M2)
R <- rbind(LeMans_run_x@R, LeMans_run_y@R)
return(new("LeMans_outputs", N=N, Catch=Catch, M2=M2, R=R))
}
# Set up the inputs to the model
NS_params <- LeMansParam(NS_par, tau=NS_tau, eta=rep(0.25, 21), L50=NS_par$Lmat, other=NS_other)
# Define fishing effort
effort <- matrix(0.5, 10, dim(NS_params@Qs)[3])
# Run the model for the first time
model_run1 <- run_LeMans(NS_params, years=10, effort=effort)
# Run the model for another 12 years
effort1 <- matrix(0.5, 12, dim(NS_params@Qs)[3])
model_run2 <- run_LeMans(N=model_run1@N[,,101], NS_params, years=12, effort=effort1)
# Combine the two model runs into a single run
out <- comb_LeMans_run(model_run1, model_run2, cont=TRUE)
out1 <- comb_LeMans_run1(model_run1, model_run2, cont=TRUE)
all(out@N == out1@N)
?identical
identical(out,out1)
out <- comb_LeMans_run(model_run1, model_run2, cont=F)
out1 <- comb_LeMans_run1(model_run1, model_run2, cont=F)
all(out@N == out1@N)
identical(out,out1)
devtools::check_win_release()
